!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Go	package	/the real package specified by the package name/
!_TAG_FIELD_DESCRIPTION!Go	packageName	/the name for referring the package/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!DTD	E,entity	/entities/
!_TAG_KIND_DESCRIPTION!DTD	a,attribute	/attributes/
!_TAG_KIND_DESCRIPTION!DTD	e,element	/elements/
!_TAG_KIND_DESCRIPTION!DTD	n,notation	/notations/
!_TAG_KIND_DESCRIPTION!DTD	p,parameterEntity	/parameter entities/
!_TAG_KIND_DESCRIPTION!Go	M,anonMember	/struct anonymous members/
!_TAG_KIND_DESCRIPTION!Go	P,packageName	/name for specifying imported package/
!_TAG_KIND_DESCRIPTION!Go	Y,unknown	/unknown/
!_TAG_KIND_DESCRIPTION!Go	a,talias	/type aliases/
!_TAG_KIND_DESCRIPTION!Go	c,const	/constants/
!_TAG_KIND_DESCRIPTION!Go	f,func	/functions/
!_TAG_KIND_DESCRIPTION!Go	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!Go	m,member	/struct members/
!_TAG_KIND_DESCRIPTION!Go	n,methodSpec	/interface method specification/
!_TAG_KIND_DESCRIPTION!Go	p,package	/packages/
!_TAG_KIND_DESCRIPTION!Go	s,struct	/structs/
!_TAG_KIND_DESCRIPTION!Go	t,type	/types/
!_TAG_KIND_DESCRIPTION!Go	v,var	/variables/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	1.1	/current.age/
!_TAG_PARSER_VERSION!DTD	0.0	/current.age/
!_TAG_PARSER_VERSION!Go	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/user/proj/astragen/internal/gsheets/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.2.0	/v6.2.0/
!_TAG_ROLE_DESCRIPTION!DTD!element	attOwner	/attributes owner/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	condition	/conditions/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	elementName	/element names/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	partOfAttDef	/part of attribute definition/
!_TAG_ROLE_DESCRIPTION!Go!package	imported	/imported package/
!_TAG_ROLE_DESCRIPTION!Go!unknown	receiverType	/receiver type/
Error	errors.go	/^func (e *InvalidUnmarshalError) Error() string {$/;"	f	struct:gsheets.InvalidUnmarshalError	typeref:typename:string
Error	errors.go	/^func (e *UnknownFieldError) Error() string {$/;"	f	struct:gsheets.UnknownFieldError	typeref:typename:string
Error	errors.go	/^func (e *UnmarshalTypeError) Error() string {$/;"	f	struct:gsheets.UnmarshalTypeError	typeref:typename:string
Field	errors.go	/^	Field string$/;"	m	struct:gsheets.UnknownFieldError	typeref:typename:string
GetRange	gsheets.go	/^func GetRange(sheetName string, structTemplate interface{}, withHeader bool) (string, error) {$/;"	f	package:gsheets	typeref:typename:(string, error)
GoogleSheetsService	gsheets.go	/^type GoogleSheetsService struct {$/;"	s	package:gsheets
InvalidUnmarshalError	errors.go	/^type InvalidUnmarshalError struct {$/;"	s	package:gsheets
NewParser	unmarshal.go	/^func NewParser(headers []any) *Parser {$/;"	f	package:gsheets	typeref:typename:*Parser
NewService	gsheets.go	/^func NewService(ctx context.Context, credentialsJSON []byte) (*GoogleSheetsService, error) {$/;"	f	package:gsheets	typeref:typename:(*GoogleSheetsService, error)
Parse	unmarshal.go	/^func (p *Parser) Parse(row []any, v any) error {$/;"	f	struct:gsheets.Parser	typeref:typename:error
Parser	unmarshal.go	/^type Parser struct {$/;"	s	package:gsheets
ReadSheet	gsheets.go	/^func (s *GoogleSheetsService) ReadSheet(spreadsheetID, readRange string) ([][]interface{}, error/;"	f	struct:gsheets.GoogleSheetsService	typeref:typename:([][]interface{}, error)
RunSync	gsheets.go	/^func (s *GoogleSheetsService) RunSync(ctx context.Context) error {$/;"	f	struct:gsheets.GoogleSheetsService	typeref:typename:error
SetTimeFormat	type_converters.go	/^func (p *Parser) SetTimeFormat(format string) {$/;"	f	unknown:gsheets.Parser
Type	errors.go	/^	Type  reflect.Type$/;"	m	struct:gsheets.UnmarshalTypeError	typeref:typename:reflect.Type
Type	errors.go	/^	Type reflect.Type$/;"	m	struct:gsheets.InvalidUnmarshalError	typeref:typename:reflect.Type
UnknownFieldError	errors.go	/^type UnknownFieldError struct {$/;"	s	package:gsheets
Unmarshal	unmarshal.go	/^func Unmarshal(rows [][]any, v any) error {$/;"	f	package:gsheets	typeref:typename:error
UnmarshalTypeError	errors.go	/^type UnmarshalTypeError struct {$/;"	s	package:gsheets
Value	errors.go	/^	Value string$/;"	m	struct:gsheets.UnmarshalTypeError	typeref:typename:string
calculateColumns	gsheets.go	/^func calculateColumns(typ reflect.Type) int {$/;"	f	package:gsheets	typeref:typename:int
columnToLetter	gsheets.go	/^func columnToLetter(col int) string {$/;"	f	package:gsheets	typeref:typename:string
convertValue	type_converters.go	/^func (p *Parser) convertValue(value string, field reflect.Value, options map[string]bool) error /;"	f	unknown:gsheets.Parser	typeref:typename:error
getValue	unmarshal.go	/^func (p *Parser) getValue(row []any, columnName string) (string, bool) {$/;"	f	struct:gsheets.Parser	typeref:typename:(string, bool)
gsheets	errors.go	/^package gsheets$/;"	p
gsheets	gsheets.go	/^package gsheets$/;"	p
gsheets	type_converters.go	/^package gsheets$/;"	p
gsheets	unmarshal.go	/^package gsheets$/;"	p
headerMap	unmarshal.go	/^	headerMap  map[string]int$/;"	m	struct:gsheets.Parser	typeref:typename:map[string]int
headers	unmarshal.go	/^	headers    []any$/;"	m	struct:gsheets.Parser	typeref:typename:[]any
newUnmarshalTypeError	errors.go	/^func newUnmarshalTypeError(value string, typ reflect.Type) error {$/;"	f	package:gsheets	typeref:typename:error
normalizeHeader	unmarshal.go	/^func (p *Parser) normalizeHeader(header string) string {$/;"	f	struct:gsheets.Parser	typeref:typename:string
parseBool	type_converters.go	/^func parseBool(value string) (bool, error) {$/;"	f	package:gsheets	typeref:typename:(bool, error)
parseStruct	unmarshal.go	/^func (p *Parser) parseStruct(row []any, val reflect.Value) error {$/;"	f	struct:gsheets.Parser	typeref:typename:error
parseTime	type_converters.go	/^func parseTime(value string) (time.Time, error) {$/;"	f	package:gsheets	typeref:typename:(time.Time, error)
service	gsheets.go	/^	service *sheets.Service$/;"	m	struct:gsheets.GoogleSheetsService	typeref:typename:*sheets.Service
timeFormat	unmarshal.go	/^	timeFormat string$/;"	m	struct:gsheets.Parser	typeref:typename:string
timeFormats	type_converters.go	/^var timeFormats = []string{$/;"	v	package:gsheets
