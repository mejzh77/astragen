!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Go	package	/the real package specified by the package name/
!_TAG_FIELD_DESCRIPTION!Go	packageName	/the name for referring the package/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!DTD	E,entity	/entities/
!_TAG_KIND_DESCRIPTION!DTD	a,attribute	/attributes/
!_TAG_KIND_DESCRIPTION!DTD	e,element	/elements/
!_TAG_KIND_DESCRIPTION!DTD	n,notation	/notations/
!_TAG_KIND_DESCRIPTION!DTD	p,parameterEntity	/parameter entities/
!_TAG_KIND_DESCRIPTION!Go	M,anonMember	/struct anonymous members/
!_TAG_KIND_DESCRIPTION!Go	P,packageName	/name for specifying imported package/
!_TAG_KIND_DESCRIPTION!Go	Y,unknown	/unknown/
!_TAG_KIND_DESCRIPTION!Go	a,talias	/type aliases/
!_TAG_KIND_DESCRIPTION!Go	c,const	/constants/
!_TAG_KIND_DESCRIPTION!Go	f,func	/functions/
!_TAG_KIND_DESCRIPTION!Go	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!Go	m,member	/struct members/
!_TAG_KIND_DESCRIPTION!Go	n,methodSpec	/interface method specification/
!_TAG_KIND_DESCRIPTION!Go	p,package	/packages/
!_TAG_KIND_DESCRIPTION!Go	s,struct	/structs/
!_TAG_KIND_DESCRIPTION!Go	t,type	/types/
!_TAG_KIND_DESCRIPTION!Go	v,var	/variables/
!_TAG_KIND_DESCRIPTION!JSON	a,array	/arrays/
!_TAG_KIND_DESCRIPTION!JSON	b,boolean	/booleans/
!_TAG_KIND_DESCRIPTION!JSON	n,number	/numbers/
!_TAG_KIND_DESCRIPTION!JSON	o,object	/objects/
!_TAG_KIND_DESCRIPTION!JSON	s,string	/strings/
!_TAG_KIND_DESCRIPTION!JSON	z,null	/nulls/
!_TAG_KIND_DESCRIPTION!Vim	C,constant	/constant definitions/
!_TAG_KIND_DESCRIPTION!Vim	a,augroup	/autocommand groups/
!_TAG_KIND_DESCRIPTION!Vim	c,command	/user-defined commands/
!_TAG_KIND_DESCRIPTION!Vim	f,function	/function definitions/
!_TAG_KIND_DESCRIPTION!Vim	k,class	/vim9script classes/
!_TAG_KIND_DESCRIPTION!Vim	m,map	/maps/
!_TAG_KIND_DESCRIPTION!Vim	n,filename	/vimball filename/
!_TAG_KIND_DESCRIPTION!Vim	v,variable	/variable definitions/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	1.1	/current.age/
!_TAG_PARSER_VERSION!DTD	0.0	/current.age/
!_TAG_PARSER_VERSION!Go	0.0	/current.age/
!_TAG_PARSER_VERSION!JSON	0.0	/current.age/
!_TAG_PARSER_VERSION!Vim	1.1	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/user/proj/astragen/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.2.0	/v6.2.0/
!_TAG_ROLE_DESCRIPTION!DTD!element	attOwner	/attributes owner/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	condition	/conditions/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	elementName	/element names/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	partOfAttDef	/part of attribute definition/
!_TAG_ROLE_DESCRIPTION!Go!package	imported	/imported package/
!_TAG_ROLE_DESCRIPTION!Go!unknown	receiverType	/receiver type/
AH	pkg/models/tables.go	/^	AH     float64 `gsheets:"AH"`$/;"	m	struct:models.AI	typeref:typename:float64
AI	pkg/models/tables.go	/^type AI struct {$/;"	s	package:models
AL	pkg/models/tables.go	/^	AL     float64 `gsheets:"AL"`$/;"	m	struct:models.AI	typeref:typename:float64
AO	pkg/models/tables.go	/^type AO struct {$/;"	s	package:models
Address	pkg/models/tables.go	/^	Address     string `gorm:"size:50"` \/\/ Соответствует Base.Adr$/;"	m	struct:models.Signal	typeref:typename:string
Address	pkg/models/tables.go	/^	Address  string `gsheets:"address" gorm:"size:100"` \/\/ Network address$/;"	m	struct:models.ITF	typeref:typename:string
Adr	pkg/models/tables.go	/^	Adr         string `gsheets:"adr"`$/;"	m	struct:models.Base	typeref:typename:string
AlarmHigh	pkg/models/tables.go	/^	AlarmHigh   *float64 `gorm:"type:decimal(20,6)"` \/\/ AH$/;"	m	struct:models.Signal	typeref:typename:*float64
AlarmLow	pkg/models/tables.go	/^	AlarmLow    *float64 `gorm:"type:decimal(20,6)"` \/\/ AL$/;"	m	struct:models.Signal	typeref:typename:*float64
AppConfig	configs/config/config.go	/^var AppConfig = struct {$/;"	v	package:config
Base	pkg/models/tables.go	/^	Base `gorm:"embedded"`$/;"	M	struct:models.ITF	typeref:typename:Base
Base	pkg/models/tables.go	/^	Base `gsheets:",squash"`$/;"	M	struct:models.AI	typeref:typename:Base
Base	pkg/models/tables.go	/^	Base `gsheets:",squash"`$/;"	M	struct:models.AO	typeref:typename:Base
Base	pkg/models/tables.go	/^	Base `gsheets:",squash"`$/;"	M	struct:models.DI	typeref:typename:Base
Base	pkg/models/tables.go	/^	Base `gsheets:",squash"`$/;"	M	struct:models.DO	typeref:typename:Base
Base	pkg/models/tables.go	/^type Base struct {$/;"	s	package:models
Cable	pkg/models/tables.go	/^	Cable             string$/;"	m	struct:models.Cable	typeref:typename:string
Cable	pkg/models/tables.go	/^type Cable struct {$/;"	s	package:models
Category	pkg/models/tables.go	/^	Category  *string  `gorm:"size:100"`          \/\/ DI.Category$/;"	m	struct:models.Signal	typeref:typename:*string
Category	pkg/models/tables.go	/^	Category  string  `gsheets:"cat"`$/;"	m	struct:models.DI	typeref:typename:string
Channel	pkg/models/tables.go	/^	Channel     string `gorm:"size:50"`$/;"	m	struct:models.Signal	typeref:typename:string
Channel	pkg/models/tables.go	/^	Channel     string `gsheets:"channel"`$/;"	m	struct:models.Base	typeref:typename:string
CheckStatus	pkg/models/tables.go	/^	CheckStatus string `gorm:"size:20"`$/;"	m	struct:models.Signal	typeref:typename:string
CheckStatus	pkg/models/tables.go	/^	CheckStatus string `gsheets:"check"`$/;"	m	struct:models.Base	typeref:typename:string
Comment	pkg/models/tables.go	/^	Comment     string `gorm:"type:TEXT"`$/;"	m	struct:models.Signal	typeref:typename:string
Comment	pkg/models/tables.go	/^	Comment     string `gsheets:"comment"`$/;"	m	struct:models.Base	typeref:typename:string
Crate	pkg/models/tables.go	/^	Crate       string `gorm:"size:50"`$/;"	m	struct:models.Signal	typeref:typename:string
Crate	pkg/models/tables.go	/^	Crate       string `gsheets:"crate"`$/;"	m	struct:models.Base	typeref:typename:string
CreatedAt	pkg/models/tables.go	/^	CreatedAt time.Time `gorm:"autoCreateTime"`$/;"	m	struct:models.Signal	typeref:typename:time.Time
DI	pkg/models/tables.go	/^type DI struct {$/;"	s	package:models
DO	pkg/models/tables.go	/^type DO struct {$/;"	s	package:models
DataType	pkg/models/tables.go	/^	DataType string `gsheets:"dataType" gorm:"size:50"`   \/\/ Data type (int, float, etc.)$/;"	m	struct:models.ITF	typeref:typename:string
Equipment	pkg/models/tables.go	/^	Equipment   string `gorm:"size:100;not null"`$/;"	m	struct:models.Signal	typeref:typename:string
Equipment	pkg/models/tables.go	/^	Equipment   string `gsheets:"equipment"`$/;"	m	struct:models.Base	typeref:typename:string
Error	internal/gsheets/errors.go	/^func (e *InvalidUnmarshalError) Error() string {$/;"	f	struct:gsheets.InvalidUnmarshalError	typeref:typename:string
Error	internal/gsheets/errors.go	/^func (e *UnknownFieldError) Error() string {$/;"	f	struct:gsheets.UnknownFieldError	typeref:typename:string
Error	internal/gsheets/errors.go	/^func (e *UnmarshalTypeError) Error() string {$/;"	f	struct:gsheets.UnmarshalTypeError	typeref:typename:string
FB	pkg/models/tables.go	/^	FB          string `gorm:"size:50"`       \/\/ Function Block$/;"	m	struct:models.Signal	typeref:typename:string
FB	pkg/models/tables.go	/^	FB          string `gsheets:"fb"`$/;"	m	struct:models.Base	typeref:typename:string
Field	internal/gsheets/errors.go	/^	Field string$/;"	m	struct:gsheets.UnknownFieldError	typeref:typename:string
Field	pkg/models/tables.go	/^	Field    string `gsheets:"field" gorm:"size:100"`     \/\/ Field name$/;"	m	struct:models.ITF	typeref:typename:string
Filter	pkg/models/tables.go	/^	Filter      *string  `gorm:"size:50"`$/;"	m	struct:models.Signal	typeref:typename:*string
Filter	pkg/models/tables.go	/^	Filter string  `gsheets:"filter"`$/;"	m	struct:models.AI	typeref:typename:string
Format	pkg/models/tables.go	/^	Format      *string  `gorm:"size:50"`$/;"	m	struct:models.Signal	typeref:typename:*string
Format	pkg/models/tables.go	/^	Format string  `gsheets:"format"`$/;"	m	struct:models.AI	typeref:typename:string
FromAI	pkg/models/tables.go	/^func (s *Signal) FromAI(ai AI) {$/;"	f	struct:models.Signal
FromAO	pkg/models/tables.go	/^func (s *Signal) FromAO(ao AO) {$/;"	f	struct:models.Signal
FromDI	pkg/models/tables.go	/^func (s *Signal) FromDI(di DI) {$/;"	f	struct:models.Signal
FromDO	pkg/models/tables.go	/^func (s *Signal) FromDO(do DO) {$/;"	f	struct:models.Signal
FuncCode	pkg/models/tables.go	/^	FuncCode string `gsheets:"func" gorm:"size:50"`     \/\/ Function code$/;"	m	struct:models.ITF	typeref:typename:string
GenPlan	pkg/models/tables.go	/^	GenPlan    string `gorm:"size:100" gsheets:"gen_plan"`$/;"	m	struct:models.Product	typeref:typename:string
GetRange	internal/gsheets/gsheets.go	/^func GetRange(sheetName string, structTemplate interface{}, withHeader bool) (string, error) {$/;"	f	package:gsheets	typeref:typename:(string, error)
GoogleSheetsService	internal/gsheets/gsheets.go	/^type GoogleSheetsService struct {$/;"	s	package:gsheets
ID	pkg/models/tables.go	/^	ID                int$/;"	m	struct:models.Cable	typeref:typename:int
ID	pkg/models/tables.go	/^	ID         int    `gorm:"primaryKey" gsheets:"id"`$/;"	m	struct:models.Product	typeref:typename:int
ID	pkg/models/tables.go	/^	ID   int    `gorm:"primaryKey" gsheets:"id"`$/;"	m	struct:models.Node	typeref:typename:int
ITF	pkg/models/tables.go	/^type ITF struct {$/;"	s	package:models
InvalidUnmarshalError	internal/gsheets/errors.go	/^type InvalidUnmarshalError struct {$/;"	s	package:gsheets
Inversion	pkg/models/tables.go	/^	Inversion *string  `gorm:"size:50"`           \/\/ DI.Inversion$/;"	m	struct:models.Signal	typeref:typename:*string
Inversion	pkg/models/tables.go	/^	Inversion string  `gsheets:"inversion"`$/;"	m	struct:models.DI	typeref:typename:string
Lcs	pkg/models/tables.go	/^	Lcs      string `gsheets:"acs" gorm:"size:50"`      \/\/ Access system$/;"	m	struct:models.ITF	typeref:typename:string
Length	pkg/models/tables.go	/^	Length   int    `gsheets:"length" gorm:"type:integer"`$/;"	m	struct:models.ITF	typeref:typename:int
Location	pkg/models/tables.go	/^	Location   string `gorm:"size:200" gsheets:"location"`$/;"	m	struct:models.Product	typeref:typename:string
Main	pkg/models/tables.go	/^	Main string `gorm:"size:100" gsheets:"main"`$/;"	m	struct:models.Node	typeref:typename:string
ModbusAddr	pkg/models/tables.go	/^	ModbusAddr  string `gorm:"index"`$/;"	m	struct:models.Signal	typeref:typename:string
ModbusAddr	pkg/models/tables.go	/^	ModbusAddr  string `gsheets:"modbus"`$/;"	m	struct:models.Base	typeref:typename:string
Model	configs/config/config.go	/^	Model      interface{} \/\/ Указатель на соответствующую модель/;"	m	struct:config.SheetConfig	typeref:typename:interface{}
Model	pkg/models/tables.go	/^	gorm.Model$/;"	M	struct:models.Signal	typeref:typename:gorm.Model
Module	pkg/models/tables.go	/^	Module      string `gorm:"size:100"`$/;"	m	struct:models.Signal	typeref:typename:string
Module	pkg/models/tables.go	/^	Module      string `gsheets:"module"`$/;"	m	struct:models.Base	typeref:typename:string
Name	pkg/models/tables.go	/^	Name              string$/;"	m	struct:models.Cable	typeref:typename:string
Name	pkg/models/tables.go	/^	Name        string `gorm:"size:200;index"`$/;"	m	struct:models.Signal	typeref:typename:string
Name	pkg/models/tables.go	/^	Name        string `gsheets:"name"`$/;"	m	struct:models.Base	typeref:typename:string
Name	pkg/models/tables.go	/^	Name       string `gorm:"size:200" gsheets:"name"`$/;"	m	struct:models.Product	typeref:typename:string
NewParser	internal/gsheets/unmarshal.go	/^func NewParser(headers []any) *Parser {$/;"	f	package:gsheets	typeref:typename:*Parser
NewService	internal/gsheets/gsheets.go	/^func NewService(ctx context.Context, credentialsJSON []byte) (*GoogleSheetsService, error) {$/;"	f	package:gsheets	typeref:typename:(*GoogleSheetsService, error)
Node	pkg/models/tables.go	/^	Node   *Node `gorm:"foreignKey:NodeID"`$/;"	m	struct:models.Signal	typeref:typename:*Node
Node	pkg/models/tables.go	/^type Node struct {$/;"	s	package:models
NodeID	pkg/models/tables.go	/^	NodeID      string `gsheets:"node"`$/;"	m	struct:models.Base	typeref:typename:string
NodeID	pkg/models/tables.go	/^	NodeID *uint `gorm:"index"` \/\/ Опциональная связь с узлом$/;"	m	struct:models.Signal	typeref:typename:*uint
NodeRef	pkg/models/tables.go	/^	NodeRef     string `gorm:"size:50;index"` \/\/ Соответствует Base.NodeID$/;"	m	struct:models.Signal	typeref:typename:string
Offset	pkg/models/tables.go	/^	Offset   int    `gsheets:"offset" gorm:"type:integer"`$/;"	m	struct:models.ITF	typeref:typename:int
PN	pkg/models/tables.go	/^	PN         string `gorm:"size:100" gsheets:"pn"`$/;"	m	struct:models.Product	typeref:typename:string
Parse	internal/gsheets/unmarshal.go	/^func (p *Parser) Parse(row []any, v any) error {$/;"	f	struct:gsheets.Parser	typeref:typename:error
Parser	internal/gsheets/unmarshal.go	/^type Parser struct {$/;"	s	package:gsheets
Place	pkg/models/tables.go	/^	Place       string `gorm:"index;size:150"`$/;"	m	struct:models.Signal	typeref:typename:string
Place	pkg/models/tables.go	/^	Place       string `gsheets:"place"`$/;"	m	struct:models.Base	typeref:typename:string
Product	pkg/models/tables.go	/^	Product           string$/;"	m	struct:models.Cable	typeref:typename:string
Product	pkg/models/tables.go	/^	Product     string `gsheets:"product"`$/;"	m	struct:models.Base	typeref:typename:string
Product	pkg/models/tables.go	/^	Product   *Product `gorm:"foreignKey:ProductID"`$/;"	m	struct:models.Signal	typeref:typename:*Product
Product	pkg/models/tables.go	/^type Product struct {$/;"	s	package:models
ProductID	pkg/models/tables.go	/^	ProductID *uint    `gorm:"index"` \/\/ Опциональная связь с продуктом$/;"	m	struct:models.Signal	typeref:typename:*uint
ProjectPos	pkg/models/tables.go	/^	ProjectPos string `gorm:"size:100" gsheets:"project_pos"`$/;"	m	struct:models.Product	typeref:typename:string
ProjectPosFrom	pkg/models/tables.go	/^	ProjectPosFrom    string$/;"	m	struct:models.Cable	typeref:typename:string
ProjectPosTo	pkg/models/tables.go	/^	ProjectPosTo      string$/;"	m	struct:models.Cable	typeref:typename:string
Property	pkg/models/tables.go	/^	Property    string `gorm:"type:TEXT"`$/;"	m	struct:models.Signal	typeref:typename:string
Property	pkg/models/tables.go	/^	Property    string `gsheets:"property"`$/;"	m	struct:models.Base	typeref:typename:string
Protocol	pkg/models/tables.go	/^	Protocol string `gsheets:"protocol" gorm:"size:50"` \/\/ Communication protocol$/;"	m	struct:models.ITF	typeref:typename:string
RW	pkg/models/tables.go	/^	RW       string `gsheets:"rw" gorm:"size:10"`         \/\/ Read\/Write permission$/;"	m	struct:models.ITF	typeref:typename:string
RangeMax	pkg/models/tables.go	/^	RangeMax    *float64 `gorm:"type:decimal(20,6)"`$/;"	m	struct:models.Signal	typeref:typename:*float64
RangeMin	pkg/models/tables.go	/^	RangeMin    *float64 `gorm:"type:decimal(20,6)"`$/;"	m	struct:models.Signal	typeref:typename:*float64
ReadSheet	internal/gsheets/gsheets.go	/^func (s *GoogleSheetsService) ReadSheet(spreadsheetID, readRange string) ([][]interface{}, error/;"	f	struct:gsheets.GoogleSheetsService	typeref:typename:([][]interface{}, error)
Row	pkg/models/tables.go	/^type Row interface {$/;"	i	package:models
RunSync	internal/gsheets/gsheets.go	/^func (s *GoogleSheetsService) RunSync(ctx context.Context) error {$/;"	f	struct:gsheets.GoogleSheetsService	typeref:typename:error
SessionLoad	Session.vim	/^let SessionLoad = 1$/;"	v
SetTimeFormat	internal/gsheets/type_converters.go	/^func (p *Parser) SetTimeFormat(format string) {$/;"	f	unknown:gsheets.Parser
SheetConfig	configs/config/config.go	/^type SheetConfig struct {$/;"	s	package:config
SheetName	configs/config/config.go	/^	SheetName  string$/;"	m	struct:config.SheetConfig	typeref:typename:string
Sign	pkg/models/tables.go	/^	Sign        *string  `gorm:"size:10"`$/;"	m	struct:models.Signal	typeref:typename:*string
Sign	pkg/models/tables.go	/^	Sign   string  `gsheets:"sign"`$/;"	m	struct:models.AI	typeref:typename:string
Signal	pkg/models/tables.go	/^type Signal struct {$/;"	s	package:models
SignalType	configs/config/config.go	/^	SignalType string      \/\/ "DI", "AI", "DO", "AO"$/;"	m	struct:config.SheetConfig	typeref:typename:string
SignalType	pkg/models/tables.go	/^	SignalType string  `gorm:"size:2;index"` \/\/ DI, AI, DO, AO$/;"	m	struct:models.Signal	typeref:typename:string
Sub1	pkg/models/tables.go	/^	Sub1 string `gorm:"size:100" gsheets:"sub1"`$/;"	m	struct:models.Node	typeref:typename:string
Sub2	pkg/models/tables.go	/^	Sub2 string `gorm:"size:100" gsheets:"sub2"`$/;"	m	struct:models.Node	typeref:typename:string
Swap	pkg/models/tables.go	/^	Swap     string `gsheets:"swap" gorm:"size:20"`       \/\/ Byte swap$/;"	m	struct:models.ITF	typeref:typename:string
System	pkg/models/tables.go	/^	System      string `gorm:"index;size:50"`$/;"	m	struct:models.Signal	typeref:typename:string
System	pkg/models/tables.go	/^	System      string `gsheets:"system"`$/;"	m	struct:models.Base	typeref:typename:string
TOF	pkg/models/tables.go	/^	TOF       *float64 `gorm:"type:decimal(9,3)"` \/\/ Timer Off Delay$/;"	m	struct:models.Signal	typeref:typename:*float64
TOF	pkg/models/tables.go	/^	TOF       float64 `gsheets:"tof"`$/;"	m	struct:models.DI	typeref:typename:float64
TON	pkg/models/tables.go	/^	TON       *float64 `gorm:"type:decimal(9,3)"` \/\/ Timer On Delay$/;"	m	struct:models.Signal	typeref:typename:*float64
TON	pkg/models/tables.go	/^	TON       float64 `gsheets:"ton"`$/;"	m	struct:models.DI	typeref:typename:float64
Tag	pkg/models/tables.go	/^	Tag         string `gorm:"uniqueIndex;not null"` \/\/ Соответствует Base.Tag$/;"	m	struct:models.Signal	typeref:typename:string
Tag	pkg/models/tables.go	/^	Tag         string `gsheets:"id"`$/;"	m	struct:models.Base	typeref:typename:string
Template	pkg/models/tables.go	/^	Template string `gsheets:"template" gorm:"type:TEXT"` \/\/ Data template$/;"	m	struct:models.ITF	typeref:typename:string
TerminalFrom	pkg/models/tables.go	/^	TerminalFrom      string$/;"	m	struct:models.Cable	typeref:typename:string
TerminalGroupFrom	pkg/models/tables.go	/^	TerminalGroupFrom string$/;"	m	struct:models.Cable	typeref:typename:string
TerminalGroupTo	pkg/models/tables.go	/^	TerminalGroupTo   string$/;"	m	struct:models.Cable	typeref:typename:string
TerminalTo	pkg/models/tables.go	/^	TerminalTo        string$/;"	m	struct:models.Cable	typeref:typename:string
Type	internal/gsheets/errors.go	/^	Type  reflect.Type$/;"	m	struct:gsheets.UnmarshalTypeError	typeref:typename:reflect.Type
Type	internal/gsheets/errors.go	/^	Type reflect.Type$/;"	m	struct:gsheets.InvalidUnmarshalError	typeref:typename:reflect.Type
Unit	pkg/models/tables.go	/^	Unit        *string  `gorm:"size:20"`$/;"	m	struct:models.Signal	typeref:typename:*string
Unit	pkg/models/tables.go	/^	Unit   string  `gsheets:"unit"`$/;"	m	struct:models.AI	typeref:typename:string
UnknownFieldError	internal/gsheets/errors.go	/^type UnknownFieldError struct {$/;"	s	package:gsheets
Unmarshal	internal/gsheets/unmarshal.go	/^func Unmarshal(rows [][]any, v any) error {$/;"	f	package:gsheets	typeref:typename:error
UnmarshalTypeError	internal/gsheets/errors.go	/^type UnmarshalTypeError struct {$/;"	s	package:gsheets
UpdatedAt	pkg/models/tables.go	/^	UpdatedAt time.Time `gorm:"autoUpdateTime"`$/;"	m	struct:models.Signal	typeref:typename:time.Time
Value	internal/gsheets/errors.go	/^	Value string$/;"	m	struct:gsheets.UnmarshalTypeError	typeref:typename:string
Value	pkg/models/tables.go	/^	Value      float64 `gorm:"type:decimal(20,6)"`$/;"	m	struct:models.Signal	typeref:typename:float64
Value	pkg/models/tables.go	/^	Value    string `gsheets:"value" gorm:"type:TEXT"`    \/\/ Default value$/;"	m	struct:models.ITF	typeref:typename:string
WH	pkg/models/tables.go	/^	WH     float64 `gsheets:"WH"`$/;"	m	struct:models.AI	typeref:typename:float64
WL	pkg/models/tables.go	/^	WL     float64 `gsheets:"WL"`$/;"	m	struct:models.AI	typeref:typename:float64
WarningHigh	pkg/models/tables.go	/^	WarningHigh *float64 `gorm:"type:decimal(20,6)"` \/\/ WH$/;"	m	struct:models.Signal	typeref:typename:*float64
WarningLow	pkg/models/tables.go	/^	WarningLow  *float64 `gorm:"type:decimal(20,6)"` \/\/ WL$/;"	m	struct:models.Signal	typeref:typename:*float64
YMAX	pkg/models/tables.go	/^	YMAX   float64 `gsheets:"YMAX"`$/;"	m	struct:models.AI	typeref:typename:float64
YMIN	pkg/models/tables.go	/^	YMIN   float64 `gsheets:"YMIN"`$/;"	m	struct:models.AI	typeref:typename:float64
access_token	token.json	/^{"access_token":"ya29.a0AZYkNZhu9Qy4LxnINy_pqANdWRb962yujYR9knXSnoN4I2MgD88DCpb_yDuucNPPhWZULPbB/;"	s
auth_provider_x509_cert_url	credentials.json	/^  "auth_provider_x509_cert_url": "https:\/\/www.googleapis.com\/oauth2\/v1\/certs",$/;"	s
auth_uri	credentials.json	/^  "auth_uri": "https:\/\/accounts.google.com\/o\/oauth2\/auth",$/;"	s
calculateColumns	internal/gsheets/gsheets.go	/^func calculateColumns(typ reflect.Type) int {$/;"	f	package:gsheets	typeref:typename:int
check	cmd/app/main.go	/^func check(err error) {$/;"	f	package:main
client_email	credentials.json	/^  "client_email": "fsmparser@spheric-terrain-405805.iam.gserviceaccount.com",$/;"	s
client_id	credentials.json	/^  "client_id": "110794909913304319839",$/;"	s
client_x509_cert_url	credentials.json	/^  "client_x509_cert_url": "https:\/\/www.googleapis.com\/robot\/v1\/metadata\/x509\/fsmparser%40/;"	s
columnToLetter	internal/gsheets/gsheets.go	/^func columnToLetter(col int) string {$/;"	f	package:gsheets	typeref:typename:string
config	configs/config/config.go	/^package config$/;"	p
convertValue	internal/gsheets/type_converters.go	/^func (p *Parser) convertValue(value string, field reflect.Value, options map[string]bool) error /;"	f	unknown:gsheets.Parser	typeref:typename:error
expiry	token.json	/^{"access_token":"ya29.a0AZYkNZhu9Qy4LxnINy_pqANdWRb962yujYR9knXSnoN4I2MgD88DCpb_yDuucNPPhWZULPbB/;"	s
getValue	internal/gsheets/unmarshal.go	/^func (p *Parser) getValue(row []any, columnName string) (string, bool) {$/;"	f	struct:gsheets.Parser	typeref:typename:(string, bool)
gsheets	internal/gsheets/errors.go	/^package gsheets$/;"	p
gsheets	internal/gsheets/gsheets.go	/^package gsheets$/;"	p
gsheets	internal/gsheets/type_converters.go	/^package gsheets$/;"	p
gsheets	internal/gsheets/unmarshal.go	/^package gsheets$/;"	p
headerMap	internal/gsheets/unmarshal.go	/^	headerMap  map[string]int$/;"	m	struct:gsheets.Parser	typeref:typename:map[string]int
headers	internal/gsheets/unmarshal.go	/^	headers    []any$/;"	m	struct:gsheets.Parser	typeref:typename:[]any
main	cmd/app/main.go	/^func main() {$/;"	f	package:main
main	cmd/app/main.go	/^package main$/;"	p
models	pkg/models/tables.go	/^package models$/;"	p
newUnmarshalTypeError	internal/gsheets/errors.go	/^func newUnmarshalTypeError(value string, typ reflect.Type) error {$/;"	f	package:gsheets	typeref:typename:error
normalizeHeader	internal/gsheets/unmarshal.go	/^func (p *Parser) normalizeHeader(header string) string {$/;"	f	struct:gsheets.Parser	typeref:typename:string
parseBool	internal/gsheets/type_converters.go	/^func parseBool(value string) (bool, error) {$/;"	f	package:gsheets	typeref:typename:(bool, error)
parseStruct	internal/gsheets/unmarshal.go	/^func (p *Parser) parseStruct(row []any, val reflect.Value) error {$/;"	f	struct:gsheets.Parser	typeref:typename:error
parseTime	internal/gsheets/type_converters.go	/^func parseTime(value string) (time.Time, error) {$/;"	f	package:gsheets	typeref:typename:(time.Time, error)
private_key	credentials.json	/^  "private_key": "-----BEGIN PRIVATE KEY-----\\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIB/;"	s
private_key_id	credentials.json	/^  "private_key_id": "3d1a2e4600c9579fc74c89627b3fa6784263e8fb",$/;"	s
project_id	credentials.json	/^  "project_id": "spheric-terrain-405805",$/;"	s
refresh_token	token.json	/^{"access_token":"ya29.a0AZYkNZhu9Qy4LxnINy_pqANdWRb962yujYR9knXSnoN4I2MgD88DCpb_yDuucNPPhWZULPbB/;"	s
s:shortmess_save	Session.vim	/^let s:shortmess_save = &shortmess$/;"	v
s:so_save	Session.vim	/^let s:so_save = &g:so | let s:siso_save = &g:siso | setg so=0 siso=0 | setl so=-1 siso=-1$/;"	v
s:sx	Session.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:wipebuf	Session.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
service	internal/gsheets/gsheets.go	/^	service *sheets.Service$/;"	m	struct:gsheets.GoogleSheetsService	typeref:typename:*sheets.Service
timeFormat	internal/gsheets/unmarshal.go	/^	timeFormat string$/;"	m	struct:gsheets.Parser	typeref:typename:string
timeFormats	internal/gsheets/type_converters.go	/^var timeFormats = []string{$/;"	v	package:gsheets
token_type	token.json	/^{"access_token":"ya29.a0AZYkNZhu9Qy4LxnINy_pqANdWRb962yujYR9knXSnoN4I2MgD88DCpb_yDuucNPPhWZULPbB/;"	s
token_uri	credentials.json	/^  "token_uri": "https:\/\/oauth2.googleapis.com\/token",$/;"	s
type	credentials.json	/^  "type": "service_account",$/;"	s
universe_domain	credentials.json	/^  "universe_domain": "googleapis.com"$/;"	s
